#!/usr/bin/env python

import sys
from math import sqrt
from multiprocessing import Pool

# Precompute list of primes up to sqrt(max_n)
def sieve(max_n):
    primes = [True] * (max_n + 1)
    primes[0] = primes[1] = False
    for i in range(2, int(sqrt(max_n)) + 1):
        if primes[i]:
            for j in range(i*i, max_n + 1, i):
                primes[j] = False
    return [i for i in range(max_n + 1) if primes[i]]

# Memoize factorizations
factorizations = {}
def factorize(n):
    if n in factorizations:
        return factorizations[n]
    factors = []
    for p in primes:
        if p*p > n:
            break
        while n % p == 0:
            factors.append(p)
            n //= p
    if n > 1:
        factors.append(n)
    factorizations[n] = factors
    return factors

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print("Usage: {} <file>".format(sys.argv[0]))
        sys.exit(1)

    filename = sys.argv[1]
    try:
        with open(filename) as f:
            max_n = max(int(line.strip()) for line in f)
            primes = sieve(int(sqrt(max_n)))
            with Pool() as pool:
                results = [pool.apply_async(factorize, args=(int(line.strip()),)) for line in f]
                for i, result in enumerate(results):
                    factors = result.get()
                    n = int(f.readline().strip())
                    print("{}={}".format(n, "*".join(str(f) for f in factors)))
    except IOError:
        print("File not found: {}".format(filename))
        sys.exit(1)
